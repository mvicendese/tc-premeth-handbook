# Generated by Django 3.0.4 on 2020-03-21 01:30

from uuid import uuid4

from django.db import migrations
from django.conf import settings

from api.assessments.models import AttemptType

from utils import importer

from utils.importer import (
	get_tc_school, 
	get_premeth_subject
)

def get_assessment_schema(apps, assessment_type):
	AssessmentSchema = apps.get_model('assessments', 'AssessmentSchema')
	return AssessmentSchema.objects.get(type=assessment_type)

def set_assessment_option(apps, assessment_schema, subject_node_id, **kwargs):
	AssessmentOptions = apps.get_model('assessments', 'AssessmentOptions')

	options = {
		f'_{AttemptType(assessment_schema.attempt_type).name}_{name}': value
		for name, value in kwargs.items()
	}

	AssessmentOptions.objects.create(
		schema=assessment_schema,
		subject_node_id=subject_node_id,
		**options
	)

def create_assessments(apps, shema_editor):
	all_import_subjects = importer.subjects.Subject.all(subject_model=apps.get_model('subjects', 'Subject'))

	for subject in all_import_subjects:
		_subject = subject
		create_subject_descendent_assessments(apps, subject)

def create_subject_descendent_assessments(apps, import_subject):
	for import_unit in import_subject.units:
		create_unit_descendent_assessments(apps, import_unit)

def create_unit_descendent_assessments(apps, import_unit):
	print('unit', import_unit.name)
	for import_block in import_unit.blocks:
		create_block_assessments(apps, import_block)
		create_block_descendent_assessments(apps, import_block)



def create_block_assessments(apps, import_block):
	Assessment = apps.get_model('assessments', 'Assessment')
	RatedAttempt = apps.get_model('assessments', 'RatedAttempt')

	schema = get_assessment_schema(apps, 'block-assessment')

	max_available_mark = importer.assessments.BlockAssessment.max_available_mark(import_block)	
	set_assessment_option(apps,
		schema, 
		import_block.id, 
		max_available_rating=max_available_mark
	)

	all_block_assessments = importer.assessments.BlockAssessment.all_for_block(
		import_block,
		student_model=apps.get_model('schools', 'Student')
	)

	for import_block_assessment in all_block_assessments:

		assessment = Assessment(
			id=import_block_assessment.id,
			schema=schema,
			subject_node_id=import_block.id,
			student_id=import_block_assessment.student.id
		)
		assessment.save()

		RatedAttempt.objects.bulk_create(
			RatedAttempt(
				id=import_attempt.id,
				assessment=assessment,
				rating=import_attempt.raw_mark,
				date=import_attempt.date
			)
			for import_attempt in import_block_assessment.attempts
		)

def create_prelearning_assessment(apps, import_lesson):
	Assessment = apps.get_model('assessments', 'Assessment')
	CompletionBasedAttempt = apps.get_model('assessments', 'CompletionBasedAttempt')

	schema = get_assessment_schema(apps, 'lesson-prelearning-assessment')

	all_prelearning_assessments = importer.assessments.LessonPrelearningAssessment.all_for_lesson(
		import_lesson,
		student_model=apps.get_model('schools', 'Student')
	)

	for prelearning_assessment in all_prelearning_assessments:
		assessment = Assessment(
			id=prelearning_assessment.id,
			schema=schema,
			subject_node_id=import_lesson.id,
			student_id=prelearning_assessment.student.id
		)
		assessment.save()

		# enum class, safe to import.
		from api.assessments.models import CompletionState
		if (prelearning_assessment.rating or 0) == 0:
			completion_state = CompletionState.NONE
		elif prelearning_assessment.rating < 4:
			completion_state = CompletionState.PARTIALLY_COMPLETE
		else:
			completion_state = CompletionState.COMPLETE

		attempt = CompletionBasedAttempt(
			id=uuid4(),
			assessment=assessment,
			attempt_number=1,
			created_at=prelearning_assessment.date,
			state=completion_state
		)
		attempt.save()

def create_block_descendent_assessments(apps, import_block):
	print('  block', import_block.name)
	for import_lesson in import_block.lessons:
		create_prelearning_assessment(apps, import_lesson)
		create_lesson_descendent_assessments(apps, import_lesson)

def create_lesson_outcome_self_assessments(apps, import_lesson_outcome):
	Assessment = apps.get_model('assessments', 'Assessment')
	RatedAttempt = apps.get_model('assessments', 'RatedAttempt')

	schema = get_assessment_schema(apps, 'lesson-outcome-self-assessment')

	all_assessments = importer.assessments.LessonOutcomeSelfAssessment.all_for_lesson_outcome(
		import_lesson_outcome,
		student_model=apps.get_model('schools', 'Student')
	)

	for import_assessment in all_assessments:
		assessment = Assessment(
			id=import_assessment.id,
			schema=schema,
			subject_node_id=import_lesson_outcome.id,
			student_id=import_assessment.student.id
		)
		assessment.save()

		attempt = RatedAttempt(
			id=uuid4(),
			assessment=assessment,
			attempt_number=1,
			created_at=import_assessment.date,
			rating=import_assessment.rating
		)
		attempt.save()


def create_lesson_descendent_assessments(apps, import_lesson):
	print('    lesson', import_lesson.name)
	for import_lesson_outcome in import_lesson.outcomes:
		create_lesson_outcome_self_assessments(apps, import_lesson_outcome)

class Migration(migrations.Migration):

    dependencies = [
        ('assessments', '1001_data_create_schemas'),
        ('subjects', 	'0009_data_prepopulate_subject_tree'),
        ('schools', 	'0002_data_import_teachers_students'),
    ]

    operations = [
    	migrations.RunPython(create_assessments)
    ]
