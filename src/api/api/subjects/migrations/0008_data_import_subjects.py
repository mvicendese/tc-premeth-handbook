# Generated by Django 3.0.4 on 2020-03-20 03:02

from uuid import uuid4

from django.db import migrations
from django.conf import settings

from utils import importer

def create_subjects(apps, schema_editor):
	Subject = apps.get_model('subjects', 'Subject')

	try:
		premeth_subject = Subject.objects.get(name='PreMeth')
		if premeth_subject:
			print(f'Existing subject {premeth_subject}')
		premeth_subject.delete()
	except Subject.DoesNotExist:
		pass	

	import_subject = importer.subjects.Subject('PreMeth')
	subject = Subject(
		id=import_subject.id,
		name=import_subject.name
	)
	subject.save()
	create_units(apps, import_subject)

def create_units(apps, import_subject):
	Unit = apps.get_model('subjects', 'Unit')
	Unit.objects.bulk_create(
		Unit(
			id=import_unit.id,
			subject_id=import_subject.id,
			name=import_unit.name
		) for import_unit in import_subject.units
	)

	for import_unit in import_subject.units:
		create_blocks(apps, import_unit)

def create_blocks(apps, import_unit):
	Block = apps.get_model('subjects', 'Block')
	Block.objects.bulk_create(
		Block(
			id=import_block.id,
			unit_id=import_unit.id,
			name=import_block.name	

		) for import_block in import_unit.blocks
	)

	for import_block in import_unit.blocks:
		create_lessons(apps, import_block)


def create_lessons(apps, import_block):
	Lesson = apps.get_model('subjects', 'Lesson')
	Lesson.objects.bulk_create(
		Lesson(
			id=import_lesson.id,
			block_id=import_block.id,
			code=import_lesson.code,
			name=import_lesson.name or 'NONE',
			number=import_lesson.number,
		)
		for import_lesson in import_block.lessons
	)

	for import_lesson in import_block.lessons:
		create_example_descriptions(apps, import_lesson)
		create_lesson_outcomes(apps, import_lesson)


def create_example_descriptions(apps, import_lesson):
	LessonExample = apps.get_model('subjects', 'LessonExample')
	LessonExample.objects.bulk_create(
		LessonExample(
			id=uuid4(), 
			lesson_id=import_lesson.id, 
			description=description
		)
		for description in import_lesson.example_descriptions
	)

def create_lesson_outcomes(apps, import_lesson):
	LessonOutcome = apps.get_model('subjects', 'LessonOutcome')
	LessonOutcome.objects.bulk_create([
		LessonOutcome(
			id=import_lesson_outcome.id, 
			lesson_id=import_lesson.id,
			description=import_lesson_outcome.description
		)
		for import_lesson_outcome in import_lesson.outcomes
	])

class Migration(migrations.Migration):

    dependencies = [
        ('subjects', '0007_auto_20200404_0811'),
    ]

    operations = [
    	migrations.RunPython(create_subjects, migrations.RunPython.noop)
    ]

